/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <vector>
#include <string>

#include "face_detection.h"
/* Header for class work_petrichor_seeta_FaceDetector */

/*
 * Class:     work_petrichor_seeta_FaceDetector_Builder
 * Method:    FaceDetection
 * Signature: (Ljava/lang/String;)J
 */
extern "C"
JNIEXPORT jlong JNICALL Java_work_petrichor_seeta_FaceDetector_Builder_FaceDetection
        (JNIEnv *env, jobject /* this */, jstring modelPath_)
{
    const char *modelPath = env->GetStringUTFChars(modelPath_, 0);

    seeta::FaceDetection *detector = new seeta::FaceDetection(modelPath);
    jlong result = (jlong) detector;

    env->ReleaseStringUTFChars(modelPath_, modelPath);
    return result;
}

/*
 * Class:     work_petrichor_seeta_FaceDetector
 * Method:    detect
 * Signature: (J[BII)Ljava/lang/String;
 */
extern "C"
JNIEXPORT jstring JNICALL Java_work_petrichor_seeta_FaceDetector_detect
        (JNIEnv *env, jobject /* this */, jlong detector_, jbyteArray data_, jint cols, jint rows)
{
    jbyte *data = env->GetByteArrayElements(data_, NULL);
    seeta::FaceDetection *detector = (seeta::FaceDetection *) detector_;

    unsigned char *grey = new unsigned char[cols * rows];

    memcpy(grey, data, (size_t) (cols * rows));

    seeta::ImageData frame(cols, rows);
    frame.data = grey;

    std::vector<seeta::FaceInfo> faces = detector->Detect(frame);
    int num = (int) faces.size(); std::string result = "";
    for (int i = 0; i < num; i++) {
        char str[50] = { 0 };
        sprintf(str, "%d,%d,%d,%d", faces[i].bbox.x, faces[i].bbox.y, faces[i].bbox.width, faces[i].bbox.height);
        result = (result += str) + ";";
    }

    env->ReleaseByteArrayElements(data_, data, 0);
    return env->NewStringUTF(result.c_str());
}
